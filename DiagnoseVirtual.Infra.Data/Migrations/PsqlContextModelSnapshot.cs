// <auto-generated />
using System;
using DiagnoseVirtual.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DiagnoseVirtual.Infra.Data.Migrations
{
    [DbContext(typeof(PsqlContext))]
    partial class PsqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("diagnose_virtual")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.DadosFazenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AreaTotal")
                        .HasColumnName("area_total")
                        .HasColumnType("double precision");

                    b.Property<string>("Cultura")
                        .IsRequired()
                        .HasColumnName("cultura")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IdFazenda")
                        .HasColumnName("id_fazenda")
                        .HasColumnType("integer");

                    b.Property<int>("QuantidadeLavouras")
                        .HasColumnName("quantidade_lavouras")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdFazenda")
                        .IsUnique();

                    b.ToTable("dados_fazenda");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.DadosLavoura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Cultivar")
                        .IsRequired()
                        .HasColumnName("cultivar")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<double>("EspacamentoHorizontal")
                        .HasColumnName("espacamento_horizontal")
                        .HasColumnType("double precision");

                    b.Property<double>("EspacamentoVertical")
                        .HasColumnName("expacamento_vertical")
                        .HasColumnType("double precision");

                    b.Property<int>("IdLavoura")
                        .HasColumnName("id_lavoura")
                        .HasColumnType("integer");

                    b.Property<string>("MesAnoPlantio")
                        .IsRequired()
                        .HasColumnName("mes_ano_plantio")
                        .HasColumnType("character varying(7)")
                        .HasMaxLength(7);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("NumeroPlantas")
                        .HasColumnName("numero_plantas")
                        .HasColumnType("integer");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnName("observacoes")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdLavoura")
                        .IsUnique();

                    b.ToTable("dados_lavoura");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Fazenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Ativa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativa")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("Concluida")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("concluida")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Geometry>("Demarcacao")
                        .HasColumnName("demarcacao_geom")
                        .HasColumnType("geometry");

                    b.Property<int>("IdUsuario")
                        .HasColumnName("id_usuario")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdUsuario");

                    b.ToTable("fazenda");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Lavoura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Concluida")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("concluida")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Geometry>("Demarcacao")
                        .IsRequired()
                        .HasColumnName("demarcacao_geom")
                        .HasColumnType("geometry");

                    b.Property<int>("IdFazenda")
                        .HasColumnName("id_fazenda")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdFazenda");

                    b.ToTable("lavoura");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.LocalizacaoFazenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasColumnName("contato")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("estado")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Gerente")
                        .IsRequired()
                        .HasColumnName("gerente")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<int>("IdFazenda")
                        .HasColumnName("id_fazenda")
                        .HasColumnType("integer");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnName("municipio")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PontoReferencia")
                        .IsRequired()
                        .HasColumnName("ponto_referencia")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Proprietario")
                        .IsRequired()
                        .HasColumnName("proprietario")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdFazenda")
                        .IsUnique();

                    b.ToTable("localizacao_fazenda");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Talhao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<Geometry>("Geometria")
                        .IsRequired()
                        .HasColumnName("geometria_geom")
                        .HasColumnType("geometry");

                    b.Property<int>("IdLavoura")
                        .HasColumnName("id_lavoura")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IdLavoura");

                    b.ToTable("talhao");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ativo")
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("nome")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("password_salt")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.DadosFazenda", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Fazenda", "Fazenda")
                        .WithOne("DadosFazenda")
                        .HasForeignKey("DiagnoseVirtual.Domain.Entities.DadosFazenda", "IdFazenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.DadosLavoura", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Lavoura", "Lavoura")
                        .WithOne("DadosLavoura")
                        .HasForeignKey("DiagnoseVirtual.Domain.Entities.DadosLavoura", "IdLavoura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Fazenda", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Fazendas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Lavoura", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Fazenda", "Fazenda")
                        .WithMany("Lavouras")
                        .HasForeignKey("IdFazenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.LocalizacaoFazenda", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Fazenda", "Fazenda")
                        .WithOne("LocalizacaoFazenda")
                        .HasForeignKey("DiagnoseVirtual.Domain.Entities.LocalizacaoFazenda", "IdFazenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiagnoseVirtual.Domain.Entities.Talhao", b =>
                {
                    b.HasOne("DiagnoseVirtual.Domain.Entities.Lavoura", "Lavoura")
                        .WithMany("Talhoes")
                        .HasForeignKey("IdLavoura")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
